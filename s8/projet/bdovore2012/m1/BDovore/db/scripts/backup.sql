CREATE USER IF NOT EXISTS BDOVORE SALT '4951cb359be2e43c' HASH '779e46eadeefabb80f11a7f96d3b2e30effc48c67381c7a87af51b9379f8e0b9' ADMIN;
CREATE SCHEMA IF NOT EXISTS FTL AUTHORIZATION BDOVORE;
CREATE FORCE ALIAS PUBLIC.FTL_CREATE_INDEX FOR "org.h2.fulltext.FullTextLucene.createIndex";
CREATE FORCE ALIAS PUBLIC.FTL_REINDEX FOR "org.h2.fulltext.FullTextLucene.reindex";
CREATE FORCE ALIAS PUBLIC.FTL_DROP_ALL FOR "org.h2.fulltext.FullTextLucene.dropAll";
CREATE FORCE ALIAS PUBLIC.FTL_SEARCH FOR "org.h2.fulltext.FullTextLucene.search";
CREATE FORCE ALIAS PUBLIC.FTL_SEARCH_DATA FOR "org.h2.fulltext.FullTextLucene.searchData";
CREATE FORCE ALIAS PUBLIC.FTL_INIT FOR "org.h2.fulltext.FullTextLucene.init";
CREATE CACHED TABLE PUBLIC.GENRE(
    ID_GENRE INTEGER NOT NULL,
    NOM_GENRE VARCHAR(100)
);
ALTER TABLE PUBLIC.GENRE ADD CONSTRAINT PUBLIC.CONSTRAINT_4 PRIMARY KEY(ID_GENRE);
-- 2 +/- SELECT COUNT(*) FROM PUBLIC.GENRE;
INSERT INTO PUBLIC.GENRE(ID_GENRE, NOM_GENRE) VALUES
(1, 'Aventures Historiques'),
(2, 'Humour');
CREATE CACHED TABLE PUBLIC.EDITEUR(
    ID_EDITEUR INTEGER NOT NULL,
    NOM_EDITEUR VARCHAR(100),
    URL VARCHAR(100)
);
ALTER TABLE PUBLIC.EDITEUR ADD CONSTRAINT PUBLIC.CONSTRAINT_B PRIMARY KEY(ID_EDITEUR);
-- 3 +/- SELECT COUNT(*) FROM PUBLIC.EDITEUR;
INSERT INTO PUBLIC.EDITEUR(ID_EDITEUR, NOM_EDITEUR, URL) VALUES
(1, STRINGDECODE('Albert Ren\u00e9'), NULL),
(2, 'Dupuis', NULL),
(3, 'Marsu Productions', NULL);
CREATE CACHED TABLE PUBLIC.SERIE(
    ID_SERIE INTEGER NOT NULL,
    NOM_SERIE VARCHAR(100)
);
ALTER TABLE PUBLIC.SERIE ADD CONSTRAINT PUBLIC.CONSTRAINT_4B PRIMARY KEY(ID_SERIE);
-- 2 +/- SELECT COUNT(*) FROM PUBLIC.SERIE;
INSERT INTO PUBLIC.SERIE(ID_SERIE, NOM_SERIE) VALUES
(1, STRINGDECODE('Ast\u00e9rix (Albums de film)')),
(2, 'Gaston Lagaffe (16 Tomes - Historique)');
CREATE INDEX PUBLIC.IDX_SERIE_NOM ON PUBLIC.SERIE(NOM_SERIE);
CREATE CACHED TABLE PUBLIC.DETAILS_SERIE(
    ID_SERIE INTEGER NOT NULL,
    NB_TOMES INTEGER,
    FLG_FINI INTEGER,
    HISTOIRE VARCHAR(2147483647)
);
ALTER TABLE PUBLIC.DETAILS_SERIE ADD CONSTRAINT PUBLIC.CONSTRAINT_3 PRIMARY KEY(ID_SERIE);
-- 1 +/- SELECT COUNT(*) FROM PUBLIC.DETAILS_SERIE;
INSERT INTO PUBLIC.DETAILS_SERIE(ID_SERIE, NB_TOMES, FLG_FINI, HISTOIRE) VALUES
(2, 16, 2, 'Gaston...');
CREATE CACHED TABLE PUBLIC.AUTEUR(
    ID_AUTEUR INTEGER NOT NULL,
    PSEUDO VARCHAR(100),
    NOM VARCHAR(100),
    PRENOM VARCHAR(100)
);
ALTER TABLE PUBLIC.AUTEUR ADD CONSTRAINT PUBLIC.CONSTRAINT_7 PRIMARY KEY(ID_AUTEUR);
-- 4 +/- SELECT COUNT(*) FROM PUBLIC.AUTEUR;
INSERT INTO PUBLIC.AUTEUR(ID_AUTEUR, PSEUDO, NOM, PRENOM) VALUES
(1, 'Goscinny', 'Goscinny', 'Rene'),
(2, 'Huderzo', 'Huderzo', 'Albert'),
(3, 'Franquin', 'Franquin', STRINGDECODE('Andr\u00e9')),
(4, STRINGDECODE('Jid\u00e9hem'), STRINGDECODE('Jid\u00e9hem'), '');
CREATE INDEX PUBLIC.IDX_AUTEUR_PSEUDO ON PUBLIC.AUTEUR(PSEUDO);
CREATE CACHED TABLE PUBLIC.DETAILS_AUTEUR(
    ID_AUTEUR INTEGER NOT NULL,
    DATE_NAISSANCE DATE,
    DATE_DECES DATE,
    NATIONALITE VARCHAR(100)
);
ALTER TABLE PUBLIC.DETAILS_AUTEUR ADD CONSTRAINT PUBLIC.CONSTRAINT_D PRIMARY KEY(ID_AUTEUR);
-- 1 +/- SELECT COUNT(*) FROM PUBLIC.DETAILS_AUTEUR;
INSERT INTO PUBLIC.DETAILS_AUTEUR(ID_AUTEUR, DATE_NAISSANCE, DATE_DECES, NATIONALITE) VALUES
(1, DATE '1926-08-14', DATE '1977-09-05', STRINGDECODE('fran\u00e7aise'));
CREATE CACHED TABLE PUBLIC.TOME(
    ID_TOME INTEGER NOT NULL,
    TITRE VARCHAR(150),
    ID_SERIE INTEGER,
    NUM_TOME INTEGER,
    ID_GENRE INTEGER
);
ALTER TABLE PUBLIC.TOME ADD CONSTRAINT PUBLIC.CONSTRAINT_2 PRIMARY KEY(ID_TOME);
-- 3 +/- SELECT COUNT(*) FROM PUBLIC.TOME;
INSERT INTO PUBLIC.TOME(ID_TOME, TITRE, ID_SERIE, NUM_TOME, ID_GENRE) VALUES
(1, STRINGDECODE('Ast\u00e9rix et les Vikings '), 1, 14, 1),
(2, STRINGDECODE('Ast\u00e9rix aux jeux olympiques'), 1, 5, 1),
(3, 'Gare aux gaffes', 2, 1, 2);
CREATE INDEX PUBLIC.IDX_TOME_TITRE ON PUBLIC.TOME(TITRE);
CREATE CACHED TABLE PUBLIC.TJ_TOME_AUTEUR(
    ID_TOME INTEGER NOT NULL,
    ID_AUTEUR INTEGER NOT NULL,
    ROLE VARCHAR(100) NOT NULL
);
ALTER TABLE PUBLIC.TJ_TOME_AUTEUR ADD CONSTRAINT PUBLIC.CONSTRAINT_D4 PRIMARY KEY(ID_TOME, ID_AUTEUR, ROLE);
-- 7 +/- SELECT COUNT(*) FROM PUBLIC.TJ_TOME_AUTEUR;
INSERT INTO PUBLIC.TJ_TOME_AUTEUR(ID_TOME, ID_AUTEUR, ROLE) VALUES
(1, 2, 'Scenariste'),
(1, 2, 'Dessinateur'),
(2, 1, 'Scenariste'),
(2, 2, 'Dessinateur'),
(3, 3, 'Scenariste'),
(3, 3, 'Dessinateur'),
(3, 4, 'Dessinateur');
CREATE CACHED TABLE PUBLIC.EDITION(
    ID_EDITION INTEGER NOT NULL,
    ID_TOME INTEGER,
    ISBN VARCHAR(13),
    DATE_PARUTION DATE,
    ID_EDITEUR INTEGER,
    FLG_DEFAULT BOOLEAN
);
ALTER TABLE PUBLIC.EDITION ADD CONSTRAINT PUBLIC.CONSTRAINT_BA PRIMARY KEY(ID_EDITION);
-- 4 +/- SELECT COUNT(*) FROM PUBLIC.EDITION;
INSERT INTO PUBLIC.EDITION(ID_EDITION, ID_TOME, ISBN, DATE_PARUTION, ID_EDITEUR, FLG_DEFAULT) VALUES
(1, 2, '9782864972266', DATE '2008-01-16', 1, TRUE),
(2, 1, '2864971895', DATE '2006-04-05', 1, TRUE),
(3, 3, '', DATE '2007-02-09', 2, TRUE),
(4, 3, '', DATE '2006-04-05', 3, FALSE);
CREATE INDEX PUBLIC.IDX_EDITION_ISBN ON PUBLIC.EDITION(ISBN);
CREATE CACHED TABLE PUBLIC.DETAILS_EDITION(
    ID_EDITION INTEGER NOT NULL,
    IMG_COUV VARCHAR(100)
);
ALTER TABLE PUBLIC.DETAILS_EDITION ADD CONSTRAINT PUBLIC.CONSTRAINT_4A PRIMARY KEY(ID_EDITION);
-- 2 +/- SELECT COUNT(*) FROM PUBLIC.DETAILS_EDITION;
INSERT INTO PUBLIC.DETAILS_EDITION(ID_EDITION, IMG_COUV) VALUES
(2, 'CV-037717-035302.jpg'),
(3, 'CV-030077-039680.jpg');
CREATE CACHED TABLE PUBLIC.TRANSACTION(
    ID_EDITION INTEGER NOT NULL,
    TYPE INTEGER,
    DATE DATE
);
ALTER TABLE PUBLIC.TRANSACTION ADD CONSTRAINT PUBLIC.CONSTRAINT_F PRIMARY KEY(ID_EDITION);
-- 0 +/- SELECT COUNT(*) FROM PUBLIC.TRANSACTION;
CREATE CACHED TABLE PUBLIC.BD_USER(
    ID_EDITION INTEGER NOT NULL,
    FLG_PRET BOOLEAN,
    FLG_DEDICACE BOOLEAN,
    FLG_AACHETER BOOLEAN,
    DATE_AJOUT DATE
);
ALTER TABLE PUBLIC.BD_USER ADD CONSTRAINT PUBLIC.CONSTRAINT_1 PRIMARY KEY(ID_EDITION);
-- 3 +/- SELECT COUNT(*) FROM PUBLIC.BD_USER;
INSERT INTO PUBLIC.BD_USER(ID_EDITION, FLG_PRET, FLG_DEDICACE, FLG_AACHETER, DATE_AJOUT) VALUES
(1, FALSE, FALSE, FALSE, DATE '2012-03-26'),
(2, FALSE, FALSE, FALSE, DATE '2012-03-26'),
(3, FALSE, FALSE, FALSE, DATE '2012-03-26');
CREATE CACHED TABLE FTL.INDEXES(
    SCHEMA VARCHAR NOT NULL,
    TABLE VARCHAR NOT NULL,
    COLUMNS VARCHAR
);
ALTER TABLE FTL.INDEXES ADD CONSTRAINT FTL.CONSTRAINT_9 PRIMARY KEY(SCHEMA, TABLE);
-- 4 +/- SELECT COUNT(*) FROM FTL.INDEXES;
INSERT INTO FTL.INDEXES(SCHEMA, TABLE, COLUMNS) VALUES
('PUBLIC', 'AUTEUR', NULL),
('PUBLIC', 'EDITION', NULL),
('PUBLIC', 'SERIE', NULL),
('PUBLIC', 'TOME', NULL);
ALTER TABLE PUBLIC.TJ_TOME_AUTEUR ADD CONSTRAINT PUBLIC.CONSTRAINT_D4B FOREIGN KEY(ID_AUTEUR) REFERENCES PUBLIC.AUTEUR(ID_AUTEUR) NOCHECK;
ALTER TABLE PUBLIC.DETAILS_AUTEUR ADD CONSTRAINT PUBLIC.CONSTRAINT_D0 FOREIGN KEY(ID_AUTEUR) REFERENCES PUBLIC.AUTEUR(ID_AUTEUR) NOCHECK;
ALTER TABLE PUBLIC.TRANSACTION ADD CONSTRAINT PUBLIC.CONSTRAINT_FF FOREIGN KEY(ID_EDITION) REFERENCES PUBLIC.EDITION(ID_EDITION) NOCHECK;
ALTER TABLE PUBLIC.EDITION ADD CONSTRAINT PUBLIC.CONSTRAINT_BA4 FOREIGN KEY(ID_EDITEUR) REFERENCES PUBLIC.EDITEUR(ID_EDITEUR) NOCHECK;
ALTER TABLE PUBLIC.TOME ADD CONSTRAINT PUBLIC.CONSTRAINT_27 FOREIGN KEY(ID_SERIE) REFERENCES PUBLIC.SERIE(ID_SERIE) NOCHECK;
ALTER TABLE PUBLIC.TOME ADD CONSTRAINT PUBLIC.CONSTRAINT_276 FOREIGN KEY(ID_GENRE) REFERENCES PUBLIC.GENRE(ID_GENRE) NOCHECK;
ALTER TABLE PUBLIC.TJ_TOME_AUTEUR ADD CONSTRAINT PUBLIC.CONSTRAINT_D4BD FOREIGN KEY(ID_TOME) REFERENCES PUBLIC.TOME(ID_TOME) NOCHECK;
ALTER TABLE PUBLIC.DETAILS_SERIE ADD CONSTRAINT PUBLIC.CONSTRAINT_3B FOREIGN KEY(ID_SERIE) REFERENCES PUBLIC.SERIE(ID_SERIE) NOCHECK;
ALTER TABLE PUBLIC.BD_USER ADD CONSTRAINT PUBLIC.CONSTRAINT_1C FOREIGN KEY(ID_EDITION) REFERENCES PUBLIC.EDITION(ID_EDITION) NOCHECK;
ALTER TABLE PUBLIC.DETAILS_EDITION ADD CONSTRAINT PUBLIC.CONSTRAINT_4A3 FOREIGN KEY(ID_EDITION) REFERENCES PUBLIC.EDITION(ID_EDITION) NOCHECK;
ALTER TABLE PUBLIC.EDITION ADD CONSTRAINT PUBLIC.CONSTRAINT_BA43 FOREIGN KEY(ID_TOME) REFERENCES PUBLIC.TOME(ID_TOME) NOCHECK;
CREATE FORCE TRIGGER PUBLIC.FTL_SERIE AFTER INSERT, UPDATE, DELETE, ROLLBACK ON PUBLIC.SERIE FOR EACH ROW QUEUE 1024 CALL "org.h2.fulltext.FullTextLucene$FullTextTrigger";
CREATE FORCE TRIGGER PUBLIC.FTL_TOME AFTER INSERT, UPDATE, DELETE, ROLLBACK ON PUBLIC.TOME FOR EACH ROW QUEUE 1024 CALL "org.h2.fulltext.FullTextLucene$FullTextTrigger";
CREATE FORCE TRIGGER PUBLIC.FTL_EDITION AFTER INSERT, UPDATE, DELETE, ROLLBACK ON PUBLIC.EDITION FOR EACH ROW QUEUE 1024 CALL "org.h2.fulltext.FullTextLucene$FullTextTrigger";
CREATE FORCE TRIGGER PUBLIC.FTL_AUTEUR AFTER INSERT, UPDATE, DELETE, ROLLBACK ON PUBLIC.AUTEUR FOR EACH ROW QUEUE 1024 CALL "org.h2.fulltext.FullTextLucene$FullTextTrigger";
